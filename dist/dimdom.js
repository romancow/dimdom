/**
 * @license
 * DimDom JavaScript Library v0.2.1-beta.1
 * https://github.com/romancow/dimdom
 *
 * Copyright 2016 Data Concepts, Inc.
 * Released under the MIT license
 * https://raw.githubusercontent.com/romancow/dimdom/master/LICENSE.txt
 *
 * Date: 2016-08-24T20:42Z
 */

// Generated by CoffeeScript 1.10.0
(function() {
  var DimDom,
    hasProp = {}.hasOwnProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DimDom = (function() {
    var abbr, createNode, ensureArray, findConstructorArgs, getChildrenNodes, isChildren, isObject, isString, ns, ref;

    function DimDom(name, attributes, styles, children) {
      var namespace, ref;
      ref = findConstructorArgs(name, attributes, styles, children), namespace = ref[0], name = ref[1], attributes = ref[2], styles = ref[3], children = ref[4];
      Object.defineProperties(this, {
        namespace: {
          value: namespace
        },
        name: {
          value: name
        },
        attributes: {
          value: attributes
        },
        styles: {
          value: styles
        },
        children: {
          value: children
        }
      });
    }

    DimDom.prototype.create = function(document) {
      var fragment, node;
      fragment = document.createDocumentFragment();
      node = createNode.call(this, document);
      fragment.appendChild(node);
      return fragment;
    };

    DimDom.prototype.appendTo = function(node) {
      var child;
      child = this.create(node.ownerDocument);
      node.appendChild(child);
      return this;
    };

    DimDom.NS = {
      HTML: 'http://www.w3.org/1999/xhtml',
      SVG: 'http://www.w3.org/2000/svg',
      MathML: 'http://www.w3.org/1998/Math/MathML'
    };

    findConstructorArgs = function(name, attributes, styles, children) {
      var namespace, ref, ref1, ref2, ref3;
      if (Array.isArray(name)) {
        ref = name, namespace = ref[0], name = ref[1];
      }
      if (!isString(name)) {
        throw new TypeError("DimDom name must be a string, not \"" + (typeof name) + "\"");
      }
      if ((namespace != null) && !isString(namespace)) {
        throw new TypeError("DimDom namespace must be a string, not \"" + (typeof namespace) + "\"");
      }
      if (isChildren(attributes)) {
        ref1 = [{}, {}, attributes], attributes = ref1[0], styles = ref1[1], children = ref1[2];
      } else if (isChildren(styles)) {
        ref3 = [(ref2 = attributes['styles']) != null ? ref2 : {}, styles], styles = ref3[0], children = ref3[1];
        delete attributes['styles'];
      }
      children = ensureArray(children);
      return [namespace, name, attributes, styles, children];
    };

    createNode = function(document) {
      var childNode, childrenNodes, i, len, name, node, ref, ref1, value;
      node = this.namespace != null ? document.createElementNS(this.namespace, this.name) : document.createElement(this.name);
      ref = this.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        value = ref[name];
        if (value != null) {
          node.setAttribute(name, value);
        }
      }
      ref1 = this.styles;
      for (name in ref1) {
        if (!hasProp.call(ref1, name)) continue;
        value = ref1[name];
        if (value != null) {
          node.style[name] = value;
        }
      }
      childrenNodes = getChildrenNodes.call(this, document);
      for (i = 0, len = childrenNodes.length; i < len; i++) {
        childNode = childrenNodes[i];
        if (childNode != null) {
          node.appendChild(childNode);
        }
      }
      return node;
    };

    getChildrenNodes = function(document) {
      var child, i, len, ref, results;
      ref = this.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (child instanceof DimDom) {
          results.push(createNode.call(child, document));
        } else if (!(child instanceof Node)) {
          results.push(document.createTextNode(child));
        } else {
          results.push(child);
        }
      }
      return results;
    };

    isString = function(val) {
      return (typeof val === 'string') || (val instanceof String);
    };

    isObject = function(val) {
      return (val != null) && (typeof val === 'object') && !Array.isArray(val);
    };

    isChildren = function(val) {
      return (val instanceof DimDom) || (val instanceof Node) || !isObject(val);
    };

    ensureArray = function(val) {
      if (val == null) {
        return [];
      } else if (Array.isArray(val)) {
        return val;
      } else {
        return [val];
      }
    };

    ref = DimDom.NS;
    for (abbr in ref) {
      ns = ref[abbr];
      DimDom[abbr] = (function(superClass) {
        var namespace;

        extend(_Class, superClass);

        namespace = ns;

        function _Class(name, attributes, styles, children) {
          _Class.__super__.constructor.call(this, [namespace, name], attributes, styles, children);
        }

        return _Class;

      })(DimDom);
    }

    return DimDom;

  })();

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = DimDom;
  } else {
    this.DimDom = DimDom;
  }

}).call(this);
