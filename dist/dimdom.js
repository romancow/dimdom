/**
 * @license
 * DimDom JavaScript Library v0.4.0-beta.1
 * https://github.com/romancow/dimdom
 *
 * Copyright 2016 Data Concepts, Inc.
 * Released under the MIT license
 * https://raw.githubusercontent.com/romancow/dimdom/master/LICENSE.txt
 *
 * Date: 2016-09-28T19:14Z
 */

// Generated by CoffeeScript 1.10.0
(function() {
  var DimDom, DimDomCollection, DimDomItem, DimDomNamespaces, ensureArray, exports, isObject, isString, mergeInto,
    slice = [].slice,
    hasProp = {}.hasOwnProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  isString = function(val) {
    return (typeof val === 'string') || (val instanceof String);
  };

  isObject = function(val) {
    return (val != null) && (typeof val === 'object') && !Array.isArray(val);
  };

  ensureArray = function(val) {
    if (val == null) {
      return [];
    } else if (Array.isArray(val)) {
      return val;
    } else {
      return [val];
    }
  };

  mergeInto = function() {
    var i, item, items, key, len, obj, val;
    obj = arguments[0], items = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      for (key in item) {
        if (!hasProp.call(item, key)) continue;
        val = item[key];
        obj[key] = val;
      }
    }
    return obj;
  };

  DimDom = (function() {
    function DimDom(getNodes) {
      if (getNodes == null) {
        getNodes = (function() {
          return [];
        });
      }
      this._getNodes = getNodes;
    }

    DimDom.prototype.create = function(document) {
      var fragment, i, len, node, nodes;
      fragment = document.createDocumentFragment();
      nodes = ensureArray(this._getNodes.call(this, document));
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        fragment.appendChild(node);
      }
      return fragment;
    };

    DimDom.prototype.appendTo = function(node) {
      var fragment;
      fragment = this.create(node.ownerDocument);
      node.appendChild(fragment);
      return this;
    };

    return DimDom;

  })();

  DimDomItem = (function(superClass) {
    var findConstructorArgs, isChildren;

    extend(DimDomItem, superClass);

    function DimDomItem(name, attributes, styles, children) {
      var namespace, ref;
      DimDomItem.__super__.constructor.call(this, this.toNode);
      ref = findConstructorArgs(name, attributes, styles, children), namespace = ref[0], name = ref[1], attributes = ref[2], styles = ref[3], this._children = ref[4];
      Object.defineProperties(this, {
        namespace: {
          value: namespace
        },
        name: {
          value: name
        },
        attributes: {
          value: attributes
        },
        styles: {
          value: styles
        },
        children: {
          value: this._children.items
        }
      });
    }

    DimDomItem.prototype.toNode = function(document) {
      var childNode, childrenNodes, hasPrefix, i, len, name, node, ns, prefix, ref, ref1, ref2, ref3, value;
      node = this.namespace != null ? document.createElementNS(this.namespace, this.name) : document.createElement(this.name);
      ref = this.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) continue;
        value = ref[name];
        if (!(value != null)) {
          continue;
        }
        ref1 = name.split(':', 2), prefix = ref1[0], hasPrefix = ref1[1];
        if (hasPrefix != null) {
          ns = (ref2 = DimDom.NSPrefix[prefix]) != null ? ref2 : '';
          node.setAttributeNS(ns, name, value);
        } else {
          node.setAttribute(name, value);
        }
      }
      ref3 = this.styles;
      for (name in ref3) {
        if (!hasProp.call(ref3, name)) continue;
        value = ref3[name];
        if (value != null) {
          node.style[name] = value;
        }
      }
      childrenNodes = this._children.toNodes(document);
      for (i = 0, len = childrenNodes.length; i < len; i++) {
        childNode = childrenNodes[i];
        if (childNode != null) {
          node.appendChild(childNode);
        }
      }
      return node;
    };

    findConstructorArgs = function(name, attributes, styles, children) {
      var namespace, ref, ref1, ref2, ref3;
      if (attributes == null) {
        attributes = {};
      }
      if (children == null) {
        children = [];
      }
      if (Array.isArray(name)) {
        ref = name, namespace = ref[0], name = ref[1];
      }
      if (!isString(name)) {
        throw new TypeError("DimDom name must be a string, not \"" + (typeof name) + "\"");
      }
      if ((namespace != null) && !isString(namespace)) {
        throw new TypeError("DimDom namespace must be a string, not \"" + (typeof namespace) + "\"");
      }
      if (isChildren(attributes)) {
        ref1 = [{}, attributes], attributes = ref1[0], children = ref1[1];
      } else if (isChildren(styles)) {
        ref2 = [null, styles], styles = ref2[0], children = ref2[1];
      }
      if (styles == null) {
        styles = (ref3 = attributes['styles']) != null ? ref3 : {};
        delete attributes['styles'];
      }
      if (!(children instanceof DimDomCollection)) {
        children = new DimDomCollection(children);
      }
      return [namespace, name, attributes, styles, children];
    };

    isChildren = function(val) {
      return (val != null) && ((val instanceof DimDom) || (val instanceof Node) || (val instanceof DimDomCollection) || !isObject(val));
    };

    return DimDomItem;

  })(DimDom);

  (function() {
    var abbr, i, len, ns, ref, results;
    this.NS = {
      HTML: 'http://www.w3.org/1999/xhtml',
      SVG: 'http://www.w3.org/2000/svg',
      MathML: 'http://www.w3.org/1998/Math/MathML',
      XLink: 'http://www.w3.org/1999/xlink',
      XMLNS: 'http://www.w3.org/2000/xmlns/'
    };
    this.NSPrefix = {
      xlink: this.NS.XLink,
      xmlns: this.NS.XMLNS
    };
    ref = ['HTML', 'SVG', 'MathML'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      abbr = ref[i];
      ns = this.NS[abbr];
      results.push(this[abbr] = (function(superClass) {
        var namespace;

        extend(_Class, superClass);

        namespace = ns;

        function _Class(name, attributes, styles, children) {
          _Class.__super__.constructor.call(this, [namespace, name], attributes, styles, children);
        }

        return _Class;

      })(DimDomItem));
    }
    return results;
  }).call(DimDomNamespaces = {});

  DimDomCollection = (function(superClass) {
    extend(DimDomCollection, superClass);

    function DimDomCollection(items) {
      DimDomCollection.__super__.constructor.call(this, this.toNodes);
      Object.defineProperties(this, {
        items: {
          value: ensureArray(items)
        }
      });
    }

    DimDomCollection.prototype.toNodes = function(document) {
      var i, item, len, ref, results;
      ref = this.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item instanceof DimDomItem) {
          results.push(item.toNode(document));
        } else if (!(item instanceof Node)) {
          results.push(document.createTextNode(item));
        } else {
          results.push(item);
        }
      }
      return results;
    };

    return DimDomCollection;

  })(DimDom);

  exports = mergeInto(DimDomItem, DimDomNamespaces, {
    Collection: DimDomCollection
  });

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = exports;
  } else {
    this.DimDom = exports;
  }

}).call(this);
